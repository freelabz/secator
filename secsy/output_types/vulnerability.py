from dataclasses import dataclass, field
from typing import List

from secsy.definitions import (VULN_CONFIDENCE, CVSS_SCORE,
							   VULN_EXTRACTED_RESULTS, ID,
							   VULN_MATCHED_AT, NAME, VULN_REFERENCE,
							   VULN_SEVERITY, TAGS)
from secsy.output_types import OutputType
from colorama import Fore, Style


@dataclass
class Vulnerability(OutputType):
	matched_at: str
	name: str
	provider: str = ''
	id: str = ''
	confidence: int = 'low'
	severity: str = 'unknown'
	cvss_score: float = 0
	tags: List[str] = field(default_factory=list)
	extracted_results: dict = field(default_factory=dict, compare=False)
	description: str = field(default='', compare=False)
	references: List[str] = field(default_factory=list, compare=False)
	reference: str = field(default='', compare=False)
	confidence_nb: int = 0
	severity_nb: int = 0
	_source: str = field(default='', repr=True)
	_type: str = field(default='vulnerability', repr=True)
	_uuid: str = field(default='', repr=True, compare=False)
	_context: dict = field(default_factory=dict, repr=True, compare=False)

	_table_fields = [
		VULN_MATCHED_AT,
		VULN_SEVERITY,
		VULN_CONFIDENCE,
		NAME,
		ID,
		CVSS_SCORE,
		TAGS,
		VULN_EXTRACTED_RESULTS,
		VULN_REFERENCE
	]
	_sort_by = ('confidence_nb', 'severity_nb', 'matched_at', 'cvss_score')

	def __post_init__(self):
		super().__post_init__()
		severity_map = {
			'critical': 0,
			'high': 1,
			'medium': 2,
			'low': 3,
			'info': 4,
			'unknown': 5,
			None: 6
		}
		self.severity_nb = severity_map[self.severity]
		self.confidence_nb = severity_map[self.confidence]
		if len(self.references) > 0:
			self.reference = self.references[0]

	def __str__(self):
		data = self.extracted_results
		if 'data' in data and isinstance(data['data'], list):
			data = ','.join(data['data'])
		elif isinstance(data, dict):
			data = ', '.join([f'{k}:{v}' for k, v in data.items()])
		green = Fore.GREEN
		magenta = Fore.MAGENTA
		reset = Style.RESET_ALL
		bright = Style.BRIGHT
		fmt_str = f'{green}{bright}[{self.name}] {magenta}[{self.severity}]{reset} {self.matched_at}'
		if data:
			fmt_str += f' {Fore.YELLOW}[{str(data)}]{Style.RESET_ALL}'
		return fmt_str
