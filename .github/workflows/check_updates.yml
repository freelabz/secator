# .github/workflows/daily-schedule.yml

name: Check Updates

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
  push:
    branches:
    - check-bleeding-edge

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 1

jobs:

  update_check:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]
        os: [ubuntu-latest]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install secator
      uses: ./.github/actions/install
      with:
        python-version: ${{ matrix.python-version }}

    - name: Setup docker compose
      uses: KengoTODA/actions-setup-docker-compose@v1
      with:
        version: '1.29.2'

    - name: Add GOBIN to PATH
      run: echo "${HOME}/.local/bin" >> $GITHUB_PATH

    - name: Add GOPATH to PATH
      run: echo "${HOME}/go/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        secator install addons worker
        secator install langs go
        secator install langs ruby
        secator install tools --fail-fast
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # to avoid being rate-limited when fetching GitHub releases

    - name: Install updates
      run: |
        secator health --bleeding 1> to_install.sh 2> output.log
        chmod +x to_install.sh
        ./to_install.sh

        echo "changes_made=false" >> $GITHUB_OUTPUT

        echo "Parsing health check output..."
        grep -E 'is outdated|is bleeding edge' output.log | \
        sed -n 's/.*\[WRN\] \([^ ]*\) is .* latest:\([^)]*\)\.*)\./\1 \2/p' | \
        while read -r tool version; do
          echo "Processing update for '$tool' to version '$version'"
          file_path="secator/tasks/${tool}.py" # Construct file path

          if [ -f "$file_path" ]; then
            echo "Updating $file_path to version $version..."
            sed -i "s|install_version = '.*'|install_version = '${version}'|" "$file_path"
            if ! git diff --quiet "$file_path"; then
                echo "File $file_path updated successfully."
                echo "changes_made=true" >> $GITHUB_OUTPUT
            else
                echo "Warning: sed command did not modify $file_path as expected."
            fi
          else
            echo "Warning: Task file $file_path not found for tool '$tool'."
          fi
        done

        echo "Finished processing updates."
        # Clean up log file
        rm output.log

      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Run integration tests
      run: |
        secator test integration --test test_celery,test_worker,test_tasks

    - name: Create Pull Request
      if: steps.update_check.outputs.changes_made == 'true' # Only run if changes were made
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ secrets.GITHUB_TOKEN }} # Or a PAT if you need to trigger other workflows
        commit-message: "chore(deps): update tool versions"
        committer: GitHub <noreply@github.com>
        author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
        signoff: false
        branch: chore/update-tools-${{ github.run_id }}
        delete-branch: true
        title: 'Update Tool Dependencies'
        body: |
          Automated updates for tool versions based on `secator health --bleeding`.

          Please review the changes and merge if appropriate.
        labels: |
          dependencies
          automated
